{
  "title": "Golang",
  "description": "Golang is a modern programming language that is used for a variety of tasks, including web development, systems programming, and cloud computing",
  "samples": [
    {
      "title": "Golang: RESTful CRUD albums",
      "contributors": ["97Afolabi"],
      "url": "golang-restful-crud-albums",
      "text": "package main\n\nimport (\n \"database/sql\"\n \"fmt\"\n \"log\"\n \"net/http\"\n\n \"github.com/gin-gonic/gin\"\n \"github.com/go-sql-driver/mysql\"\n)\n\n// create a database handle\nvar db *sql.DB\n\n// album represents data about a record album.\ntype album struct {\n ID     string  `json:\"id\"`\n Title  string  `json:\"title\"`\n Artist string  `json:\"artist\"`\n Price  float64 `json:\"price\"`\n}\n\nfunc main() {\n // Capture connection properties.\n cfg := mysql.Config{\n  User:   \"root\",     // os.Getenv(\"DBUSER\"),\n  Passwd: \"password\", // os.Getenv(\"DBPASS\"),\n  Net:    \"tcp\",\n  Addr:   \"127.0.0.1:3306\",\n  DBName: \"recordings\",\n }\n // Get a database handle.\n var err error\n db, err = sql.Open(\"mysql\", cfg.FormatDSN())\n if err != nil {\n  log.Fatal(err)\n }\n\n pingErr := db.Ping()\n if pingErr != nil {\n  log.Fatal(pingErr)\n }\n fmt.Println(\"Connected!\")\n\n router := gin.Default()\n router.GET(\"/albums\", getAlbums)\n router.GET(\"/albums/:id\", getAlbumByID)\n router.POST(\"/albums\", postAlbums)\n router.DELETE(\"/albums/:id\", deleteAlbumByID)\n router.PUT(\"/albums/:id\", updateAlbum)\n\n router.Run(\"localhost:8080\")\n}\n\n// getAlbums responds with the list of all albums as JSON.\nfunc getAlbums(c *gin.Context) {\n // An albums slice to hold data from returned rows.\n var albums []album\n\n rows, err := db.Query(\"SELECT * FROM album\")\n if err != nil {\n  return\n }\n defer rows.Close()\n // Loop through rows, using Scan to assign column data to struct fields.\n for rows.Next() {\n  var alb album\n  if err := rows.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price); err != nil {\n   return\n  }\n  albums = append(albums, alb)\n }\n if err := rows.Err(); err != nil {\n  return\n }\n\n c.IndentedJSON(http.StatusOK, gin.H{\"message\": \"All albums\", \"data\": albums})\n}\n\n// getAlbumByID locates the album whose ID value matches the id\n// parameter sent by the client, then returns that album as a response.\nfunc getAlbumByID(c *gin.Context) {\n id := c.Param(\"id\")\n\n // An album to hold data from the returned row.\n var alb album\n\n row := db.QueryRow(\"SELECT * FROM album WHERE id = ?\", id)\n err := row.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price)\n\n switch err {\n case sql.ErrNoRows:\n  c.IndentedJSON(http.StatusNotFound, gin.H{\"message\": \"album not found\"})\n  return\n case nil:\n  c.IndentedJSON(http.StatusOK, gin.H{\"message\": \"Single album\", \"data\": alb})\n default:\n  panic(err)\n }\n}\n\n// postAlbums adds an album from JSON received in the request body.\nfunc postAlbums(c *gin.Context) {\n var newAlbum album\n\n // Call BindJSON to bind the received JSON to\n // newAlbum.\n if err := c.BindJSON(&newAlbum); err != nil {\n  return\n }\n\n _, err := db.Query(\"INSERT INTO album (title, artist, price) VALUES (?, ?, ?)\", &newAlbum.Title, &newAlbum.Artist, &newAlbum.Price)\n\n switch err {\n case nil:\n  c.IndentedJSON(http.StatusCreated, newAlbum)\n default:\n  panic(err)\n }\n}\n\nfunc deleteAlbumByID(c *gin.Context) {\n id := c.Param(\"id\")\n\n _, err := db.Query(\"DELETE FROM album WHERE id = ?\", id)\n\n switch err {\n case nil:\n  c.IndentedJSON(http.StatusOK, gin.H{\"message\": \"Album deleted\"})\n default:\n  panic(err)\n }\n}\n\nfunc updateAlbum(c *gin.Context) {\n id := c.Param(\"id\")\n var updatedAlbum album\n\n // Call BindJSON to bind the received JSON to\n // updatedAlbum.\n if err := c.BindJSON(&updatedAlbum); err != nil {\n  return\n }\n\n _, err := db.Query(\"UPDATE album SET title = ?, artist = ?, price = ? WHERE id = ?\", &updatedAlbum.Title, &updatedAlbum.Artist, &updatedAlbum.Price, id)\n\n switch err {\n case nil:\n  c.IndentedJSON(http.StatusOK, updatedAlbum)\n default:\n  panic(err)\n }\n}\n"
    }
  ]
}
